/*
 * This file is part of the Cordless Power Tool Vacuum Start distribution
 * (https://github.com/abudden/cordlessvacuumstart).
 * Copyright (c) 2022 A. S. Budden
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// Serial Debug Interface

#include "Global.h"
#include "cmsis.h"
#include "Clock.h"
#include "Pins.h"
#include "Analogue.h"
#include "Application.h"
#include "PrintSupport.h"
#include "Switches.h"
#include "_SocketInfo.h" // Auto-generated by python build script
#include "Transmitter.h"

#include "tinyprintf.h"

#include <string.h> // memset
#include <math.h>

// How often (in milliseconds) should we print stuff to the UART?
#define UI_INTERVAL_MS ((uint32_t) 100U)

static void UpdateDebugScreen();
static void IncomingCommandHandler();

#ifdef PERIOD_DEBUGGING
extern uint16_t period_us;
static uint16_t GetPeriod() {return period_us;}
static void SetPeriod(uint16_t period) {period_us = period;}
#endif

void InitDebug()
{
	// Nothing to do; function kept for consistency
}

void UpdateDebug()
{
	// Read incoming commands and do whatever is requested
	IncomingCommandHandler();

	// Only run this relatively infrequently so that
	// we can spend a reasonable amount of time printing
	// stuff
	static uint32_t counter = 0;
	static bool initialised = false;
	if ( ! initialised) {
		counter = GetMillisecondCounter();
		initialised = true;
		return;
	}
	else if (! MillisecondsHaveElapsed(counter, UI_INTERVAL_MS)) {
		return;
	}
	else {
	}

	// Restart counter
	counter = GetMillisecondCounter();

	UpdateDebugScreen();
}


static void IncomingCommandHandler()
{
	char incoming = '\0';

	if (bytes_waiting()) {
		incoming = (char) get_incoming_byte();
	}

	switch (incoming) {
#ifdef PERIOD_DEBUGGING
		case '+':
			period_us += 1;
			break;
		case '-':
			period_us -= 1;
			break;
		case ']':
			period_us += 10;
			break;
		case '[':
			period_us -= 10;
			break;
#endif
		default:
			break;
	}
}

static void UpdateDebugScreen()
{
	printf("\f");
	printf("Cordless Vacuum Starter\n");
#if defined(ST_NUCLEO_F411RE)
	printf("Nucleo Version\n");
#elif defined(WEACT_BLACKPILL_F411CE)
	printf("Black Pill Version\n");
#else
	print("Unknown Version\n");
#endif
	printf("Changeset ID: " CHANGESET "\n");
	printf("Build Date: " BUILD_DATE "\n");
	printf("Version: " VERSION "\n");
	printf(SOCKET_NAME "\n\n");

	printf("Millisecond Clock: 0x%08lX\n", GetMillisecondCounter());
	printf("Analogue Current: 0x%04X\n", GetAnalogueCurrent());
	printf("Push Button State: ");
	if (GetPushButtonState()) {
		printf("True\n");
	}
	else {
		printf("False\n");
	}
	printf("Transmit State: 0x%02X\n", GetTransmitterState());
	printf("Transmit Word: 0x%08lX\n", GetTransmitWord());
#ifdef PERIOD_DEBUGGING
	printf("Period: 0x%08lX\n", GetPeriod());
#endif
}
